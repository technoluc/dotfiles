#!/bin/zsh

####################################################################################################
#                    WARNING: THIS FILE IS AUTOMATICALLY GENERATED BY A SCRIPT.                    #
#                           ANY MANUAL MODIFICATIONS MAY BE OVERWRITTEN                            #
####################################################################################################

# Define the robot character and colors
ROBOT=$'\e[32m\[._.]/\e[0m'
OK_ROBOT=$'\e[32m\[._.]/'
ERROR_ROBOT=$'\e[31m\[._.]/\e[0m'

# Function to customize Terminal settings
customize_terminal_settings() {
  if prompt_robot "Customize Terminal settings?"; then
    # Use Option As MetaKey
    if prompt_robot "Use Option As MetaKey?"; then
      # Call the function to set or add the value for useOptionAsMetaKey
      setPlistValue "useOptionAsMetaKey" "true"
      show_ok "Option As MetaKey is enabled."
    fi

    # Shell Exit Action
    if prompt_robot "Set Shell Exit Action?"; then
      # Call the function to set or add the value for shellExitAction
      setPlistValue "shellExitAction" "1"
      show_ok "Shell Exit Action is set."

    fi
  fi
}

# Function to display the robot prompt
prompt_robot() {
  read -r "response?${ROBOT} $1 [Y/n]: "
  if [[ $response =~ ^[Yy]$ || $response == "" ]]; then
    return 0
  else
    return 1
  fi
}

# Function to display the robot prompt with default as "No"
prompt_robot_no_default() {
  read -r "response?${ROBOT} $1 [y/N]: "
  if [[ $response =~ ^[Yy]$ ]]; then
    return 0
  else
    return 1
  fi
}

# Function to display a succes message with the robot
show_ok() {
  echo -e "$OK_ROBOT $1\e[0m"
}

# Function to display an error message with the robot
show_error() {
  echo -e "$ERROR_ROBOT Error: $1"
}

# Function to install apps using Homebrew from a Brewfile
install_apps_with_brew() {
  if prompt_robot_no_default "Install apps with Homebrew from a Brewfile?"; then
    # Download the Brewfile from the provided URL
    brewfile_url="https://raw.githubusercontent.com/technoluc/dotfiles/main/macos/Brewfile"
    curl -fsSL "$brewfile_url" -o Brewfile
    if [ $? -ne 0 ]; then
      show_error "Failed to download Brewfile from $brewfile_url."
      return 1
    else
      show_ok "Successfully downloaded Brewfile from $brewfile_url."
      return 0
    fi

    # Install apps from the Brewfile
    brew bundle
    if [ $? -ne 0 ]; then
      show_error "Failed to install apps from the Brewfile."
      return 1
    else
      show_ok "Successfully installed apps from the Brewfile."
      return 0
    fi

    # Clean up the downloaded Brewfile
    rm Brewfile
    return 0
  fi
}

# Function to install Homebrew
install_homebrew() {
  if prompt_robot "Install Homebrew?"; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    if [ $? -ne 0 ]; then
      show_error "Failed to install Homebrew."
      return 1
    else
      show_ok "Successfully installed Homebrew."
      return 0
    fi
  fi
}


# Function to install Xcode Command Line Tools
install_xcode_command_line_tools() {
  if prompt_robot "Install Xcode Command Line Tools?"; then
    xcode-select --install
    if [ $? -ne 0 ]; then
      show_error "Failed to install Xcode Command Line Tools."
      return 1
    else
      show_ok "Successfully installed Xcode Command Line Tools."
      return 0
    fi
  fi
}
function setPlistValue {
  local plist="$HOME/Library/Preferences/com.apple.Terminal.plist"
  local profile="Basic"
  local key="$1"
  local value="$2"

  # Check if the value already exists in the profile
  local existingValue
  existingValue=$(/usr/libexec/PlistBuddy -c "Print 'Window Settings':$profile:$key" "$plist" 2>/dev/null)

  if [[ -n $existingValue ]]; then
    # Check if the existing value matches the desired value
    if [[ "$existingValue" != "$value" ]]; then
      # Value exists but is different, set it to the provided value
      echo $existingValue
      # /usr/libexec/PlistBuddy -c "Set 'Window Settings':$profile:$key $value" "$plist"
      # show_ok "$key has been updated to $value."
    else
      show_ok "$key is already set to $value."
    fi
  else
    # Value doesn't exist, add it with the provided value
    local type
    # Determine the data type based on the value
    if [[ "$value" == "YES" || "$value" == "NO" ]]; then
      type="bool"
    elif [[ "$value" == *"."* ]]; then
      type="real"
    else
      type="integer"
    fi

    /usr/libexec/PlistBuddy -c "Add 'Window Settings':$profile:$key $type $value" "$plist"
    if [ $? -ne 0 ]; then
      show_error "Failed to add $key with value $value to the plist."
    else
      show_ok "$key has been added and set to $value."
    fi
  fi
}

############################################################################################
#                                   START OF MAIN SCRIPT                                   #
############################################################################################

echo "Welcome to Mac Setup Script!"

echo "Follow the prompts from the robot to set up your Mac."

# Check if xcode is installed
if ! xcode-select --print-path &>/dev/null; then
  install_xcode_command_line_tools
else
  show_ok "Xcode Command Line Tools already installed."
fi

# Check if Homebrew is installed
if ! command -v brew &>/dev/null; then
  install_homebrew
else
  show_ok "Homebrew already installed."
fi

install_apps_with_brew
customize_terminal_settings

# You can add more functions here for customizing settings.

show_ok "Mac setup is complete."

